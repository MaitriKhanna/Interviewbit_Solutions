int find_index(int &k,int n){
    if(n==1) return 0;
    n--;

    int first;
    int partial_fac=n;

    while(k>=partial_fac && n>1){
        partial_fac*= n-1;
        n--;
    }

    first= k/partial_fac;
    k%= partial_fac;

    return first;
}

string Solution::getPermutation(int n, int k) {
    string str="";
    vector<int> s;
    for(int i=1;i<=n;i++) s.push_back(i);


    k=k-1;

    for(int i=0;i<n;i++){
        int index= find_index(k,n-i);
        str+= to_string(s[index]);
        s.erase(s.begin()+index);

    } 

    return str;
}



/*
int find_index(int &k,int n){
    if(n==1) return 0;
    n--;

    int first;
    int partial_fac=n;

    while(k>=partial_fac && n>1){
        partial_fac*= n-1;
        n--;
    }

    first= k/partial_fac;
    k%= partial_fac;

    return first;
}

string Solution::getPermutation(int n, int k) {
    string str="";
    set<int> s;
    for(int i=1;i<=n;i++) s.insert(i);

    set<int>::iterator itr;

    itr= s.begin();

    k=k-1;

    for(int i=0;i<n;i++){
        int index= find_index(k,n-i);
        advance(itr,index);  // advances itr by n positions
        str+= to_string(*itr);
        s.erase(itr);

        itr=s.begin();
    } 

    return str;
}
*/
