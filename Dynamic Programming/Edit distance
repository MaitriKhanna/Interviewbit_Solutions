/* memoized
int dp[451][451];

int solve(string A,string B,int n,int m){
    if(n==0 || m==0) return max(n,m);

    if(dp[n][m]!=-1) return dp[n][m];

    if(A[n-1]==B[m-1]){
        return dp[n][m]= solve(A,B,n-1,m-1); 
    }
    else{
        return dp[n][m]= 1+ min(solve(A,B,n-1,m-1),min(solve(A,B,n-1,m),solve(A,B,n,m-1)));
    }
}

int Solution::minDistance(string A, string B){
    int n=A.size(),m=B.size();
    memset(dp,-1,sizeof(dp));
    return solve(A,B,n,m);
} */

int Solution::minDistance(string A, string B) {
    int n= A.size();
    int m=B.size();

    vector<vector<int>> dp (n+1,vector<int> (m+1));

    for(int i=0;i<=n;i++) dp[i][0]=i;

    for(int i=1;i<=m;i++) dp[0][i]=i;
    
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(A[i-1]==B[j-1]){
                dp[i][j]=dp[i-1][j-1];
            }
            else{
                dp[i][j]=1+min(dp[i-1][j-1],min(dp[i-1][j],dp[i][j-1]));
            }
        }
    }

    return dp[n][m];

}
