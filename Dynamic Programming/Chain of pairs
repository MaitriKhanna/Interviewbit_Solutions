// iterative
int Solution::solve(vector<vector<int> > &A){
    int n=A.size();
    vector<int> dp(n,1);
    int maxm=1;
    for(int i=0;i<n;i++){
        for(int j=i-1;j>=0;j--){
            if(A[j][1]<A[i][0]){
                dp[i]=max(dp[i],1+dp[j]);
            }
            maxm=max(maxm,dp[i]);
        }
    }

    return maxm;
}

/* recursive
int dp[1001][10001];

int pairs(vector<vector<int> > &A, int index,int prev){
    if(index>=A.size()) return 0;
    if(dp[index][prev]!=-1) return dp[index][prev];

    int ans=0;

    if(A[index][0]>prev){
        ans=max(1+pairs(A,index+1,A[index][1]),pairs(A,index+1,prev));
    }
    else{
        ans=pairs(A,index+1,prev);
    }

    return dp[index][prev]= ans;

}
int Solution::solve(vector<vector<int> > &A) {
    memset(dp,-1,sizeof(dp));
    return pairs(A,0,0);
}
*/
