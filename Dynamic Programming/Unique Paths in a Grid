int Solution::uniquePathsWithObstacles(vector<vector<int> > &A){
    int n=A.size(),m=A[0].size();

    vector<vector<int>> dp(n+1,vector<int> (m+1,0));
    if(A[0][0]==1) return 0;
    dp[1][1]=1;

    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(i==1 && j==1) continue;
            if(A[i-1][j-1]==0){
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
    }

    return dp[n][m];

}

/* //recursive
int dp[101][101];

int solve(vector<vector<int> > &A,int i,int j){
    if(i==A.size()-1 && j==A[0].size()-1) return 1;
    if(i>=A.size() || j>=A[0].size()) return 0;

    if(dp[i][j]!=-1) return dp[i][j];

    int ans=0;

    if(j+1<A[0].size() && A[i][j+1]==0) ans+= solve(A,i,j+1);
    if(i+1< A.size() && A[i+1][j]==0) ans+= solve(A,i+1,j);

    return dp[i][j]= ans;

}

int Solution::uniquePathsWithObstacles(vector<vector<int> > &A) {
    memset(dp,-1,sizeof(dp));
    if(A[0][0]==1) return 0;

    return solve(A,0,0);
}*/
