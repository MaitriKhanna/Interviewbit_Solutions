
int Solution::anytwo(string A){
    string B=A;
    int n=A.size();
    vector<vector<int>> dp (n+1,vector<int>(n+1,0));

    for(int i=1;i<=n;i++){
        for(int j=1;j<=n;j++){
            if(A[i-1]==B[j-1] && (i!=j)){
                dp[i][j]= 1+dp[i-1][j-1];
            }
            else{
                dp[i][j]= max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }

    int ans= dp[n][n];
    if(ans>1) return 1;
    else{
        return 0;
    }
}

/*  memoized
int dp[101][101];

int solve(string A,string B,int n,int m){
    if(n==0 || m==0) return 0;

    if(dp[n][m]!=-1) return dp[n][m];

    if(A[n-1]==B[m-1] && (n!=m)){
        return dp[n][m]= 1+solve(A,B,n-1,m-1);
    }
    else{
        return dp[n][m]= max(solve(A,B,n,m-1),solve(A,B,n-1,m));
    }
}

int Solution::anytwo(string A) {
    
    int n=A.size();
    memset(dp,-1,sizeof(dp));

    int ans= solve(A,A,n,n);
    
    if(ans>1) return 1;
    else{
        return 0;
    }

}*/
