bool check(vector<int> &A,vector<vector<vector<bool>>> &dp, int s,int index,vector<int> &r,int element){
    if(element==0) return s==0;
    if(index>=A.size()) return false;

    if(dp[index][s][element]==false){
        return false;
    }

    if(A[index]<=s){
        r.push_back(A[index]);
        if(check(A,dp,s-A[index],index+1,r,element-1)){
            return dp[index][s][element]=true;
        }
        r.pop_back();
    }

    if(check(A,dp,s,index+1,r,element)){
        return dp[index][s][element]=true;
    }

    return dp[index][s][element]=false;

}

vector<vector<int> > Solution::avgset(vector<int> &A) {
    int n= A.size();
    int sum=0;
    sort(A.begin(),A.end());
    for(int i=0;i<n;i++) sum+= A[i];
    vector<vector<int>> res;
    vector<vector<vector<bool>>> dp (n,vector<vector<bool>> (sum+1, vector<bool> (n,true)));
    for(int i=1;i<=n-1;i++){
        if((sum*i)%n==0){
            int s= (sum*i)/n;
            vector<int> r;
            if(check(A,dp,s,0,r,i)){
                sort(r.begin(),r.end());
                res.push_back(r);

                unordered_map<int,int> map;
                for(int k : r){
                    map[k]++;
                }
                vector<int> p;
                for(int k : A){
                    if(map[k]) map[k]--;
                    else{
                        p.push_back(k);
                    }
                }
                sort(p.begin(),p.end());
                res.push_back(p);
                return res;
            }


        }
    }
    
    return res;


}


/*  // recursive
bool check(vector<int> &A, int s,int index,vector<int> &r,int element){
    if(element==0) return s==0;
    if(index>=A.size()) return false;

    if(A[index]<=s){
        r.push_back(A[index]);
        if(check(A,s-A[index],index+1,r,element-1)){
            return true;
        }
        r.pop_back();
    }

    if(check(A,s,index+1,r,element)){
        return true;
    }

    return false;

}

vector<vector<int> > Solution::avgset(vector<int> &A) {
    int n= A.size();
    int sum=0;
    sort(A.begin(),A.end());
    for(int i=0;i<n;i++) sum+= A[i];
    vector<vector<int>> res;

    for(int i=1;i<=n-1;i++){
        if((sum*i)%n==0){
            int s= (sum*i)/n;
            vector<int> r;
            if(check(A,s,0,r,i)){
                sort(r.begin(),r.end());
                res.push_back(r);

                unordered_map<int,int> map;
                for(int k : r){
                    map[k]++;
                }
                vector<int> p;
                for(int k : A){
                    if(map[k]) map[k]--;
                    else{
                        p.push_back(k);
                    }
                }
                sort(p.begin(),p.end());
                res.push_back(p);
                return res;
            }


        }
    }
    
    return res;


}

*/
