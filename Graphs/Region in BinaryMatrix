int connect(int src, vector<vector<int>> &adj, vector<int> &visited){
    if(visited[src]) return 0;
    visited[src]=1;
    int ans=1;
    for(auto i : adj[src]){
        if(!visited[i]){
            ans+= connect(i,adj,visited);
        }
    }

    return ans;
}

int Solution::solve(vector<vector<int> > &A) {
    int n=A.size(),m=A[0].size();
    vector<vector<int>> adj (n*m);
    vector<int> dx {-1,-1,-1,0,0,1,1,1};
    vector<int> dy {-1,0,1,-1,1,-1,0,1};
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(A[i][j]==1){
                int node= i*m+j;
                //cout << node << " " << i << " " << j << endl;;
                for(int k=0;k<8;k++){
                    int x= i+dx[k],y=j+dy[k];
                    //cout << x <<  " " << y << endl;
                    if(x>-1 && x<n && y>-1 && y<m && A[x][y]==1){
                        adj[node].push_back(x*m+y);
                    }
                }

            }
        }
    }


    int v=n*m,ans=1;
    vector<int> visited(v,0);
    for(int i=0;i<v;i++){
        if(!visited[i]){
            ans=max(ans,connect(i,adj,visited));
        }
    }

    return ans;


}
